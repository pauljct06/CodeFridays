1. Ask your interviewer questions to resolve ambiguity.
    What are the data types?
    How much data should I expect?
    Who is going to be using the app?

    Design an algo to sort a list
        What sort of list? An array? A linked list?
            array
        What does the array hold? Numbers? Characters? Strings?
            Numbers
        And are the numbers integers?
            Yes
        Where did the numbers come from? Are they IDs? Values of something?
            They are the ages of customers.
        And how many customers are there?
            About a million

        Sort an array containing a million integers between 0 and 130

2. Design an Algorithm - talk it out with the interviewer
    What are the space and time complexities?
    If they gave you specific data (e.g., mentioned that the data is ages, or in sorted order), have you leveraged that information? There’s probably a reason that you’re given it.
    What happens if there is a lot of data?


3. Talk out your plan with the interviewer or write pseudo-code, but make sure to tell your interviewer that you’re writing pseudo-code! Otherwise, he/she may think that you’re never planning to write “real” code, and many interviewers will hold that against you.
    Many candidates will write pseudo- code in order to ‘escape’ writing real code, and you certainly don’t want to be confused with those candidates.

4. Write your code, not too slow and not too fast.
    You don’t need to rush through your code; in fact, this will most likely hurt you. Just go at a nice, slow methodical pace.
    Use Data Structures Generously.  Where relevant, use a good data structure or define your own.
        find the minimum age for a group of people, consider designing a data structure to represent a Person. This shows your interviewer that you care about good object oriented design.
    Whiteboard tactics: use the whole damn board

5. Test your code and carefully fix any mistakes
    General cases: Test the normal case
    Extreme cases: 0, negative, null, maximums, etc
    User error: What happens if the user passes in null or a negative value?

    When you notice problems in your code, really think deeply about why your code failed before fixing the mistake.



TOP 10 MISTAKES
    practicing only on a computer
    not doing mock interviews
    trying to memorize solutions
    talking too much
        situation, action, resolution
    talking too little
    rushing
    not debugging
    sloppy coding
    giving up

anagrams
palindromes

pointers
hashmaps
recursion

linked lists
binary trees
graphs